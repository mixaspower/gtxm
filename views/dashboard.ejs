<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="icon" type="image/x-icon" href="../assets/img/rocket.png">
    <link rel="stylesheet" href="/public/styles/earn.css">
    <style>
        

.notification {
    position: fixed;
    top: -100px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    gap: 10px;
    min-width: 300px;
    padding: 15px 25px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    color: #fff;
    opacity: 0;
    transition: top 0.5s ease-in-out, opacity 0.5s ease-in-out;
    /* box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); */
    z-index: 1000;
}

/* Success Notification */
.notification-success {
    background: linear-gradient(90deg, #6C55F9, #6C55F9);
}

/* Error Notification */
.notification-error {
    background: linear-gradient(90deg, rgb(140, 0 ,0), rgb(140, 0 ,0));
}

/* Info Notification */
.notification-info {
    background: linear-gradient(90deg, #6C55F9, #6C55F9);
}

/* Notification when shown */
.notification.show {
    top: 20px;
    opacity: 1;
}

.notification-icon {
    font-size: 20px;
}

    .earn-app {
        text-align: center;
        padding: 5px;
    }

    .earn-header h1 {
        font-size: 24px;
        color: #333;
    }

    .earn-header p {
        font-size: 16px;
        color: #666;
    }

    .submenu {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .submenu-btn {
        padding: 10px 20px;
        background-color: #f0f0f0;
        border: none;
        border-radius: 5px;
        margin: 0 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
        font-size: 14px;
    }

    .submenu-btn.active {
        background-color: #6C55F9;
        color: white;
    }

    .submenu-btn:hover {
        background-color: #6C55F9;
        color: white;
    }

    .task-list {
        margin-top: 20px;
    }

    .task-item {
        background-color: #f9fbfc;
        padding: 15px;
        border-radius: 12px;
        margin-bottom: 15px;
        /* box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); */
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .task-info {
        text-align: left;
    }

    .task-actions {
        display: flex;
        justify-content: space-between;
        width: 100%;
        margin-top: 10px;
    }

    .task-item h2 {
        font-size: 18px;
        margin-bottom: 5px;
        color: #34495e;
    }

    .task-item p {
        font-size: 14px;
        color: #7f8c8d;
    }

    .task-item p a {
        color: #6C55F9;
        text-decoration: none;
    }

    .task-item p a:hover {
        text-decoration: underline;
    }

    .go-to-task-btn {
        padding: 10px 15px;
        background-color: #2f2f2f;
        color: white;
        border: none;
        border-radius: 20px;
        text-decoration: none;
        font-size: 14px;
        transition: background-color 0.3s ease;
    }

    .go-to-task-btn:hover {
        background-color: #4a4a4a;
    }

    /* .complete-task-btn {
        padding: 10px 15px;
        background-color: #004997;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.3s ease;
    } */

    .complete-task-btn:hover {
        background-color: #7863fb;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        animation: fadeIn 0.3s;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 12px;
        /* box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); */
        text-align: center;
        width: 90%;
        max-width: 400px;
        position: relative;
        animation: scaleUp 0.3s ease-out;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        color: #aaa;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

    .close-btn:hover,
    .close-btn:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }

    .custom-file-label {
        display: inline-block;
        padding: 25px 40px;
        background-color: #dfe2e4;
        color: rgb(61, 61, 61);
        border-radius: 3px;
        cursor: pointer;
        margin-top: 15px;
        transition: background-color 0.3s ease;
    }

    .custom-file-label:hover {
        background-color: #745ffd;
        color: white;
    }

    #modal-upload-input {
        display: none;
    }

    .choose-file-text {
        display: inline;
    }

    .delete-btn {
        padding: 8px 13px;
        background-color: #e74d3c00;
        color: rgb(140, 0, 0);
        border: 2px solid rgb(140, 0, 0);
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 10px;
        transition: background-color 0.3s ease;
    }

    .delete-btn:hover {
        color: rgb(162, 3, 3);
    }

    .screenshot-preview {
        max-width: -webkit-fill-available;
        margin-top: 10px;
        max-height: 400px;
        width: auto;
        border-radius: 8px;
        display: none;
    }

    .upload-btn {
        padding: 10px 15px;
        background-color: rgb(44, 44, 44);
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 15px;
        transition: background-color 0.3s ease;
    }

    .upload-btn:hover {
        background-color: rgb(61, 61, 61);
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes scaleUp {
        from {
            transform: scale(0.95);
        }
        to {
            transform: scale(1);
        }
    }

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            background-color: #f0f4f8;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .app-container {
            max-height: 1100px;
            width: 100%;
            max-width: 500px;
            height: 100vh;
            background-color: #ffffff;
            display: flex;
            flex-direction: column;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }

        .profile-app {
            width: 100%;
            max-width: 700px;
            background-color: #ffffff;
            /* border-radius: 15px; */
            /* box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); */
            overflow: hidden;
        }

        @media (max-width: 768px) {
            .app-container {
            max-height: 1100px;
            width: 100%;
            max-width: 500px;
            height: 100vh;
            background-color: #ffffff;
            display: flex;
            flex-direction: column;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            border-radius: 0px;
            overflow: hidden;
            position: relative;
        }

        .profile-app {
            width: 100%;
            max-width: 700px;
            background-color: #ffffff;
            border-radius: 0px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
}


        #content {
            flex: 1;
            overflow-y: auto;
            /* padding: 20px; */
            position: relative;
        }

        .content-slide {
            position: absolute;
            width: 100%;
            top: 0;
            left: 0;
            opacity: 0;
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
        }

        .slide-in-left {
            transform: translateX(-100%);
        }

        .slide-in-right {
            transform: translateX(100%);
        }

        .slide-active {
            opacity: 1;
        }

        .nav-bar {
            width: 100%;
            bottom: 0px;
            position: fixed;
            display: flex;
            justify-content: space-around;
            background-color: #2d2d2d;
            color: white;
            padding: 10px 0;
            max-width: 500px;
        }

        .nav-bar button {
            flex: 1;
            padding: 12px 0;
            border: none;
            background-color: transparent;
            color: white;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            transition: background-color 0.3s, color 0.3s;
            font-weight: 500;
        }

        .nav-bar button:hover {
            background-color: #3a3a3a;
        }

        .nav-bar button.active {
            /* background-color: #1d1d1d; */
            color: #6C55F9;
            font-weight: bold;
        }

        #loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            z-index: 99999;
            justify-content: center;
            align-items: center;
            transition: opacity 0.3s ease-in-out;
        }

        #loading-overlay.active {
            display: flex;
            opacity: 1;
        }

        #loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #6C55F9;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    

<div class="app-container">
    <div id="content" aria-live="polite">
        <!-- Initial empty div where content will be injected -->
    </div>
    <div id="loading-overlay" aria-hidden="true">
        <div id="loading-spinner" role="status" aria-label="Loading"></div>
    </div>
    
    <div class="nav-bar">
        <button onclick="navigate('home')" id="nav-home" aria-label="Navigate to Home">Αρχική</button>
        <button onclick="navigate('earn')" id="nav-earn" aria-label="Navigate to Earn">Εργασίες</button>
        <button onclick="navigate('vip')" id="nav-vip" aria-label="Navigate to VIP">Επίπεδα</button>
        <button onclick="navigate('profile')" id="nav-profile" aria-label="Navigate to Profile">Προφίλ</button>
    </div>
</div>

<script>
    
    let currentPage = '';
    let currentController = null;

    function navigate(page, forceReload = false, notificationType = null) {
    console.log(`Navigating to: ${page}`);

    // Check if the page is already the current page and if reload should be forced
    if (page === currentPage && !forceReload) {
        console.log(`Navigation canceled: already on ${page} and forceReload is not set.`);
        return; // Do not reload if the page is the same and forceReload is false
    }

    if (currentController) {
        currentController.abort(); // Cancel the previous request
    }

    currentController = new AbortController();
    const { signal } = currentController;
    document.getElementById('loading-overlay').style.display = 'flex';

    const content = document.getElementById('content');
    const direction = pageOrder(currentPage, page) > 0 ? 'right' : 'left';

    // Remove all previous content
    while (content.firstChild) {
        content.removeChild(content.firstChild);
    }

    const newContent = document.createElement('div');
    newContent.className = `content-slide slide-in-${direction}`;
    content.appendChild(newContent);

    fetch(`/page/${page}`, { signal, cache: 'no-cache' })
        .then(response => {
            if (!response.ok) {
                if (response.status === 401 || response.status === 404) { // Unauthorized access
                    console.warn(`Session expired or unauthorized. Redirecting to login.`);
                    window.location.href = '/login'; // Redirect to login page
                    return; // Stop further execution
                }
                throw new Error(`Page not found: ${page}`);
            }
            return response.text();
        })
        .then(html => {
            // Detect if the server returned the login page's content
            if (html.includes('<title>Σύνδεση - socialboost</title>') || 
                html.includes('<form id="login-form">') || 
                html.includes('<h1>Σύνδεση</h1>')) {
                console.warn(`Login page detected in response. Redirecting to login.`);
                window.location.href = '/login'; // Redirect to login page
                return; // Stop further execution
            }

            console.log(`Page loaded successfully: ${page}`);
            newContent.innerHTML = html;
            setTimeout(() => {
                newContent.classList.add('slide-active');
            }, 100);

            setActiveNavButton(page);
            setTimeout(() => {
                if (content.firstChild && content.firstChild !== newContent) {
                    content.removeChild(content.firstChild);
                }
                newContent.classList.remove(`slide-in-${direction}`);
                currentPage = page;
                document.getElementById('loading-overlay').style.display = 'none';

                // Show notification based on the notificationType parameter
                if (notificationType === 'success') {
                    showNotification('Η εργασία βρίσκεται σε αξιολόγηση.', 'success', 3000);
                } else if (notificationType === 'error') {
                    showNotification('Κάτι πήγε στραβά.', 'error', 3000);
                } else if (notificationType === 'congrats') {
                    showNotification('Συγχαρητήρια!', 'success', 3000);
                } else if (notificationType === 'withdrawalSuccess') {
                    showNotification('Επιτυχία! Η ανάληψη θα πραγματοποιηθεί εντός 24 ωρών.', 'success', 3000);
                }
            }, 300);
        })
        .catch(error => {
            console.error(`Error loading page ${page}:`, error);
            newContent.innerHTML = `<p>Error loading page: ${error.message}</p>`;
            document.getElementById('loading-overlay').style.display = 'none';

            // Show error notification if the fetch fails
            if (notificationType === 'error') {
                showNotification(`Error: ${error.message}`, 'error', 3000);
            }
        });
}

    function setActiveNavButton(activePage) {
        const buttons = document.querySelectorAll('.nav-bar button');
        buttons.forEach(button => button.classList.remove('active'));
        document.getElementById(`nav-${activePage}`).classList.add('active');
    }

    function pageOrder(current, target) {
        const pages = ['home', 'earn', 'vip', 'profile'];
        return pages.indexOf(target) - pages.indexOf(current);
    }

    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM fully loaded');
        navigate('home'); // Load home.ejs on page load
        // setActiveNavButton('home');
    });
</script>

<script>
    let currentTaskId = '';
    let currentPayAmount = '';

    function openModal(taskId, payAmount) {
        currentTaskId = taskId;
        currentPayAmount = payAmount;

        const modal = document.getElementById('upload-modal');
        modal.style.display = 'flex';
        modal.classList.add('show-modal');
        document.getElementById('error-message').style.display = 'none';
        document.getElementById('confirm-upload-btn').style.display = 'none';
    }

    function closeModal() {
        const modal = document.getElementById('upload-modal');
        modal.style.display = 'none';
        modal.classList.remove('show-modal');
        document.getElementById('modal-upload-input').value = '';
        document.getElementById('modal-preview').src = '';
        document.getElementById('modal-preview').style.display = 'none';
        document.getElementById('custom-file-input').style.display = 'inline-block';
        document.getElementById('delete-image-btn').style.display = 'none';
    }

    function previewImage(input) {
        const file = input.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const preview = document.getElementById('modal-preview');
                preview.src = e.target.result;
                preview.style.display = 'block';
                document.getElementById('confirm-upload-btn').style.display = 'inline';
                document.getElementById('delete-image-btn').style.display = 'inline';
                document.getElementById('custom-file-input').style.display = 'none';
            };
            reader.readAsDataURL(file);
        }
    }

    function deleteImage() {
        document.getElementById('modal-preview').src = '';
        document.getElementById('modal-preview').style.display = 'none';
        document.getElementById('modal-upload-input').value = '';
        document.getElementById('confirm-upload-btn').style.display = 'none';
        document.getElementById('delete-image-btn').style.display = 'none';
        document.getElementById('custom-file-input').style.display = 'inline-block';
    }

    function showLoader() {
        document.getElementById('loading-overlay').style.display = 'flex';
    }

    function hideLoader() {
        document.getElementById('loading-overlay').style.display = 'none';
    }

  // Function to update the task count for a specific category
function updateTaskCount(categoryId, count) {
    document.querySelector(`.tab-button[onclick="showCategory('${categoryId}')"]`).innerText = `${categoryId.replace('-', ' ')} (${count})`;
}

// Function to get the current count of tasks in a category
function getCurrentTaskCount(categoryId) {
    return document.getElementById(categoryId).querySelectorAll('.task-item').length;
}

// Function to increment or decrement the count
function incrementTaskCount(categoryId, increment = 1) {
    const currentCount = getCurrentTaskCount(categoryId);
    updateTaskCount(categoryId, currentCount + increment);
}

// Function to update task count accurately
function updateAllCounts() {
    // Update counts for all task categories
    updateTaskCount('new-tasks', getCurrentTaskCount('new-tasks'));
    updateTaskCount('pending-tasks', getCurrentTaskCount('pending-tasks'));
    updateTaskCount('approved-tasks', getCurrentTaskCount('approved-tasks'));
    updateTaskCount('failed-tasks', getCurrentTaskCount('failed-tasks'));
}

// Updated confirmUpload function to recalculate counts properly
function confirmUpload() {
    if (currentTaskId !== '' && currentPayAmount !== '') {
        showLoader(); // Show the loader while processing

        const formData = new FormData();
        formData.append('taskId', currentTaskId);
        formData.append('payAmount', currentPayAmount);

        fetch('/submit-task', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            hideLoader(); // Hide the loader after processing
            if (data.message === 'Task submitted successfully!') {
                closeModal();
                navigate('earn', true, 'success');
            } else {
                navigate('earn', true, 'error');
                // alert('Error: ' + data.message);
            }
        })
        .catch(err => {
            hideLoader(); // Hide the loader if there is an error
            console.error('Error:', err);
            navigate('earn', true, 'error');
        });
    } else {
        alert('Please ensure all required fields are filled.');
    }
}


</script>


<script>
    function openModal2() {
        x = document.getElementById("theBalance").innerText;
        document.getElementById("availableBal").innerText = x ;
        const modal = document.getElementById('withdrawModalCustom');
        modal.style.display = 'flex';
    }

    function closeModal2() {
        const modal = document.getElementById('withdrawModalCustom');
        modal.style.display = 'none';
    }

</script>

<script>
    function validateAmountInput(event) {
      const inputElement = event.target;
      let inputValue = inputElement.value;
  
      // Επιτρέψτε μόνο αριθμούς, κόμμα (,) ή τελεία (.)
      inputValue = inputValue.replace(/[^0-9.,]/g, '');
  
      // Εξασφαλίστε ότι υπάρχει μόνο ένα κόμμα ή τελεία
      const hasCommaOrDot = inputValue.includes('.') || inputValue.includes(',');
      if (hasCommaOrDot) {
        inputValue = inputValue.replace(/[,]/g, '.'); // Μετατροπή όλων των "," σε "."
        const parts = inputValue.split('.');
        if (parts.length > 2) {
          // Κρατήστε μόνο το πρώτο "." και αφαιρέστε τα υπόλοιπα
          inputValue = parts[0] + '.' + parts.slice(1).join('');
        }
      }
  
      // Ενημερώστε την τιμή του input
      inputElement.value = inputValue;
    }
  </script>
<script>
    async function validateForm(event) {
        event.preventDefault();

        let amountInput = document.getElementById('amountCustom').value;
        const walletAddress = document.getElementById('walletAddressCustom').value;
        const errorMessage = document.getElementById('errorMessageCustom');
        const currentBalanceElement = document.querySelector('.balance-info p strong');

        // Αντικατάσταση του "," με "." και μετατροπή σε δεκαδικό αριθμό
        amountInput = amountInput.replace(',', '.');
        const amount = parseFloat(amountInput);

        // Επαλήθευση ποσού και διεύθυνσης πορτοφολιού
        if (!amount || isNaN(amount) || amount <= 0) {
            errorMessage.textContent = 'Το ποσό πρέπει να είναι θετικός αριθμός.';
            errorMessage.style.display = 'block';
            return;
        }

        if (!/^[a-zA-Z0-9]{32,44}$/.test(walletAddress)) {
            errorMessage.textContent = 'Η διεύθυνση πορτοφολιού δεν είναι έγκυρη.';
            errorMessage.style.display = 'block';
            return;
        }

        try {
            showLoader();

            // Αποστολή του αιτήματος ανάληψης στον server
            const response = await fetch('/withdraw', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ amount, walletAddress })
            });

            const result = await response.json();

            if (response.ok) {
                closeModal2();
                event.target.reset();
                errorMessage.style.display = 'none';
                hideLoader();
                navigate('profile', true, "withdrawalSuccess");
            } else {
                errorMessage.textContent = result.message || 'Error processing the withdrawal.';
                errorMessage.style.display = 'block';
                hideLoader();
            }
        } catch (err) {
            console.error('Error sending withdrawal request:', err);
            errorMessage.textContent = 'Κάτι πήγε στραβά.';
            errorMessage.style.display = 'block';
            hideLoader();
        }
    }
</script>



<script>
    function showCategory(categoryId) {
        // Remove 'active' class from all sections and buttons
        document.querySelectorAll('.task-category').forEach(category => category.classList.remove('active'));
        document.querySelectorAll('.tab-button').forEach(button => button.classList.remove('active'));

        // Add 'active' class to the selected section and button
        document.getElementById(categoryId).classList.add('active');
        document.querySelector(`.tab-button[onclick="showCategory('${categoryId}')"]`).classList.add('active');
    }
</script>


<script>
    function logout() {
        // Redirect to the logout endpoint or implement logout logic here
        window.location.href = '/logout';
    }
</script>


</script>


<script>
function openModal3(vipLevel) {
    // Set initial loading state
    const addressElement = document.getElementById('addressText');
    addressElement.childNodes[0].nodeValue = "Φόρτωση διεύθυνσης Solana...";
    document.getElementById('vipModal').style.display = 'flex';
    document.getElementById('upg-to').innerHTML = "Αναβάθμιση σε επίπεδο " + vipLevel;

    // Define the upgrade costs in Euros
    const vipAmountsInEur = {
        1: 100,
        2: 300,
        3: 600,
        4: 1000,
        5: 3000
    };

    const amountInEur = vipAmountsInEur[vipLevel];

    if (!amountInEur) {
        console.error('Invalid VIP level selected');
        document.getElementById('usdtAmount').textContent = 'Invalid VIP level';
        return;
    }

    // Fetch the current SOL to EUR exchange rate
    fetch('/get-sol-eur-rate')
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to fetch SOL price');
            }
            return response.json();
        })
        .then(data => {
            const solPriceInEur = data.solToEurRate; // Current price of SOL in EUR
            const amountInSol = (amountInEur / solPriceInEur).toFixed(4); // Calculate equivalent SOL
            document.getElementById('usdtAmount').textContent = `${amountInSol} SOL (≈ €${amountInEur})`;
        })
        .catch(error => {
            console.error('Error fetching SOL to EUR rate:', error);
            document.getElementById('usdtAmount').textContent = 'Error fetching SOL price';
        });

    console.log(`User chose VIP level: ${vipLevel}`);

    // Fetch wallet address for the user
    fetch(`/upgrade-vip?vipLevel=${vipLevel}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to fetch wallet address');
            }
            return response.json();
        })
        .then(data => {
            console.log('Server response:', data);
            // Update wallet address in the modal
            addressElement.childNodes[0].nodeValue = data.publicKey;
            // Show additional buttons (Copy and Check)
            document.getElementById("copyButton").style.display = "flex";
            document.getElementById("check-Btn").style.display = "flex";
            document.getElementById("copyButton").style.display = "inline";
        })
        .catch(error => {
            console.error('Error fetching wallet address:', error);
            document.getElementById('walletAddress').textContent = 'Error generating wallet';
        });
}





    function closeModal3() {
        // document.getElementById('addressText').textContent = "Generating Address...";
        document.getElementById('vipModal').style.display = 'none';
        document.getElementById("notifyUser").style.display="none";
        document.getElementById("check-Btn").style.display = "none";
        document.getElementById("copyButton").style.display = "none";
        document.getElementById('copyButton').innerText = "(Αντιγραφή διεύθυνσης)";
    }

    async function checkPayment() {
        try {
            // Call the /check-payment route
            document.getElementById("notifyUser").style.display="none";
            showLoader();
            const response = await fetch('/check-payment');
            hideLoader();
            
            // Check if the response is OK (status code 200)
            if (!response.ok) {
                throw new Error('Failed to check payment: ' + response.statusText);
            }
            
            // // Parse the response JSON
            // const data = await response.json();
            
            // // Alert the balance
            // if (data.balance !== undefined) {
            //     // alert(`Wallet balance is: ${data.balance.toFixed(2)} SOL`);
            //     document.getElementById("notifyUser").style.display="block";
            // } else if (data.error) {
            //     alert(`Error: ${data.error}`);
            // }
            // Parse the response JSON
            const isPaymentReceived = await response.json();

            // Update the UI based on the response
            if (isPaymentReceived) {
                document.getElementById("notifyUser").style.display = "block";
                document.getElementById("notifyUser").style.color = "green";
                document.getElementById("notifyUser").innerText = "Payment received!";
                setTimeout(() => {
                    navigate('vip', true, 'congrats')
                }, 1000);
                // navigate('vip');
                // update vip level for the user in the db
            } else {
                // Payment not received
                document.getElementById("notifyUser").style.display = "block";
                document.getElementById("notifyUser").innerHTML = "Δε βρέθηκε πληρωμή. <br>Αν έχεις στείλει λιγότερα SOL, απλά στείλε τα υπόλοιπα.";
            }
        } catch (error) {
            console.error('Error checking payment:', error);
            alert('An error occurred while checking the payment.');
        }
    }

    window.onclick = function(event) {
        const modal = document.getElementById('vipModal');
        if (event.target === modal) {
            closeModal3();
        }
    }


    // function copyAddress() {
    //         const addressText = document.getElementById('addressText').textContent;
    //         navigator.clipboard.writeText(addressText).then(() => {
    //             alert('Έγινε αντιγραφή');
    //         }).catch(err => {
    //             alert('Failed to copy: ', err);
    //         });
    //     }

        
</script>




<script>
    document.addEventListener("DOMContentLoaded", function() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
                    handleVipLevels();
                }
            });
        });

        // Start observing the body for changes (or specify a more specific container if needed)
        observer.observe(document.body, { childList: true, subtree: true });

        // Initial call for the first page load
        handleVipLevels();

        function handleVipLevels() {
            // Get the user's current VIP level from the page
            let userVipLevelElement = document.getElementById("userVipLevel");
            if (userVipLevelElement) {
                let userVipLevel = parseInt(userVipLevelElement.innerText.trim(), 10);

                if (!isNaN(userVipLevel)) {
                    // Get all VIP cards
                    let vipCards = document.querySelectorAll('.vip-card');

                    // Iterate through each VIP card and display or hide buttons accordingly
                    vipCards.forEach((card, index) => {
                        // VIP 0 card should correspond to index 0, so adjust the level check
                        let cardLevel = index; // Adjusted to match the "VIP 0" card correctly
                        let buyButton = card.querySelector('.vip-card__buy-button');

                        if (cardLevel <= userVipLevel) {
                            // Hide the buy button for the current and lower levels
                            buyButton.style.display = 'none';

                            // Highlight the user's current VIP card
                            if (cardLevel === userVipLevel) {
                                card.style.border = '2px solid #6C55F9';
                                card.style.backgroundColor = '#6b55f91e'; // Light blue background for emphasis
                                card.querySelector('.vip-card__title').style.color = '#6C55F9';
                            }
                        }
                    });
                } else {
                    console.error("Error parsing VIP level: Check the content of #userVipLevel.");
                }
            } else {
                console.error("#userVipLevel element not found.");
            }
        }
    });
</script>


<script>
    // Replace only the content of the address text
    document.getElementById('addressText').innerText = data.publicKey;

    // Function to copy the text
    function copyToClipboard() {
        const textToCopy = document.getElementById('addressText').innerText;
        navigator.clipboard.writeText(textToCopy)
            .then(() => {
                const copyButton = document.getElementById('copyButton');
                const toast = document.getElementById('toast');

                // Change the text and style to indicate it was copied
                copyButton.innerText = 'Aντιγράφηκε!';
                copyButton.classList.add('copied');

                // Show and animate the toast notification
                toast.style.display = 'block';
                toast.style.animation = 'fadeInOut 3s ease-in-out';

                // Revert the button text and style after 3 seconds
                // setTimeout(() => {
                //     copyButton.innerText = 'copy';
                //     copyButton.classList.remove('copied');
                // }, 3000);

                // Hide the toast after the animation ends
                setTimeout(() => {
                    toast.style.display = 'none';
                }, 3000);
            })
            .catch(err => {
                console.error('Failed to copy text: ', err);
            });
    }
</script>


<script>


function copyRefCode() {
    // alert("test");
    code = document.getElementById('theCode').innerHTML;
    navigator.clipboard.writeText(code);
    showNotification("Code copied to clipboard!", type = 'success', 1000);

}



    function showNotification(message, type = 'success', duration = null) {
    const notification = document.getElementById('notification');
    const iconMap = {
        success: '&#x2713;', // Checkmark
        error: '&#x26A0;',   // Warning triangle
        info:'&#x2713;'
        //  '&#x2139;'     // Information circle
    };

    // Update the notification type class
    notification.className = `notification notification-${type}`;
    notification.querySelector('.notification-icon').innerHTML = iconMap[type] || '';
    notification.querySelector('.notification-message').textContent = message;

    // Show the notification
    notification.classList.add('show');

    // Hide the notification after the specified duration
    setTimeout(() => {
        notification.classList.remove('show');
    }, duration);
}


</script>
    
<script>
    function copyToClipboard2(index) {
        // Get all copy icon elements
        const allIcons = document.querySelectorAll('.copyIcon');

        // Reset all icons to 'copy1.png'
        allIcons.forEach(icon => {
            icon.src = '/icons/copy1.png';
        });

        // Get the text content of the span with the specific index
        let taskComment = document.getElementById(`taskComment-${index}`).textContent;

        // Remove leading and trailing quotes, if any
        if (taskComment.startsWith('"') && taskComment.endsWith('"')) {
            taskComment = taskComment.slice(1, -1);
        }

        // Check for modern Clipboard API support
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(taskComment).then(() => {
                // Change only the clicked icon to 'copy2.png'
                document.getElementById(`copyIcon-${index}`).src = '/icons/copy2.png';

                // Show the custom notification
                showNotification('Αντιγράφηκε', 'info', 1000);
            }).catch(err => {
                console.error('Failed to copy text: ', err);
                fallbackCopy(taskComment, index);
            });
        } else {
            // Fallback for unsupported browsers
            fallbackCopy(taskComment, index);
        }
    }

    function fallbackCopy(text, index) {
        // Create a temporary textarea element to hold the text
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);

        // Select the text and execute the copy command
        textArea.select();
        textArea.setSelectionRange(0, textArea.value.length); // For mobile compatibility

        try {
            document.execCommand('copy');
            // Change only the clicked icon to 'copy2.png'
            document.getElementById(`copyIcon-${index}`).src = '/icons/copy2.png';

            // Show the custom notification
            showNotification('Αντιγράφηκε', 'info', 1000);
        } catch (err) {
            console.error('Fallback: Unable to copy', err);
        }

        // Remove the textarea element
        document.body.removeChild(textArea);
    }
</script>


        
</body>
</html>
